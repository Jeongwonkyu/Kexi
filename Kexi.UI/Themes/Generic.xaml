<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:view="clr-namespace:Kexi.View;assembly=Kexi"
                    xmlns:view1="clr-namespace:Kexi.UI.View"
                    xmlns:base="clr-namespace:Kexi.UI.Base"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:edit="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:converters="clr-namespace:Kexi.UI.Converters"
                    xmlns:wpfControls="clr-namespace:Digimezzo.WPFControls">


    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
    <converters:PathPartConverter x:Key="PathPathConverter" />
    <converters:AnyToVisibilityConverter x:Key="AnyToVisibilityConverter" />
    <converters:AnyToBoolConverter x:Key="_anyToBoolConverter" />
    <converters:WindowTitleConverter x:Key="WindowTitleConverter" />
    <system:Int32 x:Key="IntZero">0</system:Int32>
    <system:Int32 x:Key="IntOne">1</system:Int32>
    <converters:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />

    <xcad:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter" />

    <SolidColorBrush x:Key="WindowsAccentBrush"
                     Color="{Binding Color, Source={x:Static SystemParameters.WindowGlassBrush}}" />


    <LinearGradientBrush x:Key="buttonBack" StartPoint="1,0" EndPoint="1,1">
        <GradientStop Offset="1" Color="#404040" />
        <GradientStop Offset="0" Color="#555555" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="buttonBorder" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#404040" />
        <GradientStop Offset="1" Color="#404040" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="lightBlueGradient">
        <GradientStop Offset="1" Color="LightBlue" />
        <GradientStop Offset="0" Color="White" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="lightGrayGradient">
        <GradientStop Offset="0" Color="LightGray" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="tabItemGradientSelected" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFFFFF" />
        <GradientStop Offset="0.1" Color="LightBlue" />
        <GradientStop Offset="0.2" Color="LightBlue" />
        <GradientStop Offset="1" Color="#FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="tabItemGradientUnSelected" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="LightGray" />
        <GradientStop Offset="0.7" Color="#FFFFFF" />
        <GradientStop Offset="0.9" Color="#FFFFFF" />
        <GradientStop Offset="1" Color="#CCCCCC" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="tabPanelGradient" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#333333" />
        <GradientStop Offset="0.8" Color="#333333" />
        <GradientStop Offset="1" Color="LightBlue" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="tabItemBorderGradient" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFFF" />
        <GradientStop Offset="0.8" Color="#EEEEEE" />
        <GradientStop Offset="1" Color="LightBlue" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />

    <DataTemplate x:Key="SyntaxHighlightingTemplate" DataType="{x:Type GridViewColumn}">
        <TextBlock view:TextBlockExtensions.BindableInlines="{Binding RtfRuns}"
            Margin="0" Padding="0"
            Background="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"
            Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"
            >
        </TextBlock>
    </DataTemplate>

    <ControlTemplate x:Key="KexiItemTemplate" TargetType="{x:Type ListViewItem}">
        <Border Uid="Border_57"
                x:Name="ListBoxItemRoot"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}">
            <GridViewRowPresenter Uid="GridViewRowPresenter_1"
                                  Margin="2"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Columns="{TemplateBinding GridView.ColumnCollection}"
                                  Content="{TemplateBinding Content}" />
        </Border>
    </ControlTemplate>

    <Style x:Key="FocusStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0" StrokeThickness="1"
                               Stroke="{DynamicResource ResourceKey=KexSelectionBackground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemDetailStyle" TargetType="{x:Type ListBoxItem}">
        <Style.Setters>
            <!--  Wichtig damit TextAlignment=right funktioniert  -->
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusStyle}" />
            <Setter Property="Template" Value="{StaticResource ResourceKey=KexiItemTemplate}" />
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=KexSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=KexSelectionForeground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=KexSelectionBorderBrush}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition
                        Binding="{Binding Path=MouseMoving, RelativeSource={RelativeSource AncestorType={x:Type view1:ListerView}}}"
                        Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource ResourceKey=KexMouseSelectionBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource ResourceKey=KexMouseSelectionForeground}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Highlighted}" Value="True">
                <Setter Property="Background" Value="{StaticResource ItemHighlightColor}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding HasError}" Value="True">
                <Setter Property="Background" Value="{StaticResource ItemErrorColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ListViewItemDetailNoMouseOverStyle" TargetType="{x:Type ListBoxItem}">
        <Style.Setters>
            <Setter Property="Template" Value="{StaticResource ResourceKey=KexiItemTemplate}" />
            <!--Wichtig damit TextAlignment=right funktioniert-->
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=KexSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=KexSelectionForeground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=KexSelectionBorderBrush}" />
            </Trigger>
            <DataTrigger Binding="{Binding Highlighted}" Value="True">
                <Setter Property="Background" Value="{StaticResource ItemHighlightColor}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding HasError}" Value="True">
                <Setter Property="Background" Value="{StaticResource ItemErrorColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListViewItemThumbStyle" TargetType="{x:Type ListViewItem}">
        <Style.Setters>
            <Setter Property="Margin" Value="7"/>
        </Style.Setters>
    </Style>

    <Style x:Key="ListViewItemTextInputStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=KexSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=KexSelectionForeground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=KexSelectionBorderBrush}" />
                <Setter Property="Template" Value="{StaticResource ResourceKey=KexiItemTemplate}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=KexMouseSelectionForeground}" />
                <Setter Property="Template" Value="{StaticResource ResourceKey=KexiItemTemplate}" />
            </Trigger>

        </Style.Triggers>
        <Setter Property="IsEnabled" Value="{Binding Enabled}" />
    </Style>

    <Style x:Key="AdressbarButtonBorder" TargetType="Border">
        <Setter Property="Border.Background" Value="{DynamicResource buttonBack}" />
        <Setter Property="Border.BorderBrush" Value="{StaticResource buttonBorder}" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Border.BorderBrush" Value="{DynamicResource KexMouseSelectionBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AdressbarButtonBorderOuter" TargetType="Border">
        <Setter Property="Border.Background" Value="{DynamicResource AdressbarButtonBorderOuterBrush}" />
        <Setter Property="Border.BorderBrush" Value="{DynamicResource AdressbarButtonBorderOuterBrush}" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Border.BorderBrush" Value="{DynamicResource KexMouseSelectionBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MenuButtonBorderOuter" TargetType="Border">
        <Setter Property="Border.Background" Value="{DynamicResource AdressbarButtonBorderOuterBrush}" />
        <Setter Property="Border.BorderBrush" Value="{DynamicResource AdressbarButtonBorderOuterBrush}" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Border.BorderBrush" Value="{DynamicResource KexMouseSelectionBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=PopupViewModel.IsOpen}" Value="True">
                <Setter Property="Border.BorderBrush" Value="{DynamicResource KexSelectionBorderBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AdressbarButtonBorderInner" TargetType="Border">
        <Setter Property="Border.Background" Value="{DynamicResource AdressbarButtonBorderInnerBrush}" />
        <Setter Property="Border.BorderBrush" Value="{DynamicResource AdressbarButtonBorderInnerBrush}" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="Border.BorderThickness" Value="1" />
        <Setter Property="Border.Padding" Value="2" />
        <Style.Triggers>
            <Trigger Property="Border.IsMouseOver" Value="True">
                <Setter Property="Border.Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Border.BorderBrush" Value="{DynamicResource KexMouseSelectionBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="BreadcrumbLastButtonStyle"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource adressbarBack}" />
     
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="0,0,0,0"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="3"
                            Padding="5,0,5,0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource KexMouseSelectionForeground}" />
            </Trigger>
            <!--<Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" DesiredFrameRate="50"
                                             From="0.0" To="1.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>-->
        </Style.Triggers>
    </Style>
    
    <Style x:Key="CommandButtonStyle"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource adressbarBack}" />
     
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="0,0,0,0"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="3"
                            Padding="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource KexMouseSelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="CommandButtonStatusStyle"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="0,0,0,0"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="3"
                            Padding="4,4,4,4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource KexMouseSelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="BreadcrumbButtonStyle"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource adressbarBack}" />
     
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="0,0,0,0"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="3"
                            Padding="2,0,2,0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource KexMouseSelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AdressbarButtonStyle"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="5" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!--<Setter Property="Background" Value="Transparent" />-->
        <Setter Property="Background" Value="{DynamicResource adressbarBack}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Style="{DynamicResource AdressbarButtonBorderOuter}">
                        <Border Background="{TemplateBinding Background}"
                                Style="{DynamicResource AdressbarButtonBorderInner}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="2,0,0,0"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="3"
                            Padding="5,0,5,0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource KexMouseSelectionForeground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource KexMouseSelectionBackground}" />
                <Setter Property="Foreground" Value="{DynamicResource KexMouseSelectionForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NoBorder"
           BasedOn="{x:Null}"
           TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextboxRounded"
           BasedOn="{x:Null}"
           TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="AllowDrop" Value="true" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg"
                            Margin="0"
                            Padding="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding Background}"
                            BorderThickness="2"
                            CornerRadius="2">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type base:PlainView}, ResourceId=myPlainViewDSK}"

        BasedOn="{StaticResource {x:Type ListBox}}"
        TargetType="{x:Type ListView}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Opacity" Value="90" />
        <Setter Property="ItemContainerStyle"
                Value="{Binding (ListView.View).ItemContainerStyle, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ItemTemplate"
                Value="{Binding (ListView.View).ItemTemplate, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <wpfControls:VirtualizingWrapPanel
                        Width="{Binding (FrameworkElement.ActualWidth),
                                               RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}"
                        MinWidth="{Binding (ListView.View).ItemWidth,
                                                  RelativeSource={RelativeSource AncestorType=ListView}}"
                        ChildWidth="150"
                        ChildHeight="150"
                        >
                    </wpfControls:VirtualizingWrapPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="gridHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ListerForeground}" />
        <Setter Property="BorderBrush" Value="#b8b7b7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid SnapsToDevicePixels="True" Margin="0">
                        <Border Name="HeaderBorder"
                                Background="{TemplateBinding Panel.Background}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                BorderThickness="0,0,0,0">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="7" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Rectangle Name="UpperHighlight"
                                           Fill="#FFE3F7FF"
                                           Visibility="Collapsed" />
                                <Border Grid.RowSpan="2" Padding="7,0,0,0">
                                    <ContentPresenter Name="HeaderContent"
                                                      Margin="0,0,0,1"
                                                      HorizontalAlignment="Left"
                                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                      Content="{TemplateBinding ContentControl.Content}"
                                                      ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                      RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                </Border>
                            </Grid>
                        </Border>
                        <Canvas>
                            <Thumb Name="PART_HeaderGripper">
                                <Thumb.Style>
                                    <Style TargetType="Thumb">
                                        <Style.Resources>
                                            <ResourceDictionary />
                                        </Style.Resources>
                                        <Setter Property="Canvas.Right" Value="-9" />
                                        <Setter Property="FrameworkElement.Width" Value="18" />
                                        <Setter Property="FrameworkElement.Height">
                                            <Setter.Value>
                                                <Binding Path="ActualHeight"
                                                         RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Control.Padding">
                                            <Setter.Value>
                                                <Thickness>0,0,0,0</Thickness>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Panel.Background"
                                                Value="{DynamicResource ListerStatusbarBackground}" />
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Thumb">
                                                    <Border Background="#00FFFFFF"
                                                            Padding="{TemplateBinding Control.Padding}">
                                                        <Rectangle Width="2"
                                                                   HorizontalAlignment="Center"
                                                                   Fill="{TemplateBinding Panel.Background}" />
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource KexSelectionBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="dockmanagerStyle" TargetType="view1:DockManager">
        <!--<Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Popup, Path=DataContext.IsOpen}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>

                            <DoubleAnimation Duration="0:0:0.200" From="1" To="0.7" Storyboard.TargetProperty="Opacity" />

                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>

                            <DoubleAnimation Duration="0:0:0.200" From="0.7" To="1" Storyboard.TargetProperty="Opacity" />

                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>-->
    </Style>


    <Style x:Key="spinnerStyle" TargetType="ContentControl">
        <!--<Style.Triggers>
            <DataTrigger Binding="{Binding Path=Content.Content.IsLoading}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <Int32Animation Storyboard.TargetProperty="Visibility"
                                            From="{Binding Source={StaticResource IntZero}, Converter={StaticResource IntToVisibilityConverter} }" 
                                            To="{Binding Source={StaticResource IntOne}, Converter={StaticResource IntToVisibilityConverter} }" >
                            </Int32Animation>
                        </Storyboard>
                    </BeginStoryboard> 
                </DataTrigger.EnterActions>
            </DataTrigger>
        </Style.Triggers>-->

    </Style>
    


    <DataTemplate x:Key="IconTemplate">
        <StackPanel Width="90"
                    Height="100"
                    Orientation="Vertical">
            <Grid Width="70"
                  Height="70"
                  HorizontalAlignment="Center">
                <Image Margin="6,6,6,9" Source="{Binding Details.MediumIcon}" />
            </Grid>
            <TextBlock Margin="0,0,0,1"
                       HorizontalAlignment="Center"
                       Text="{Binding DisplayName}"
                       TextWrapping="Wrap" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="ThumbTemplate">
        <StackPanel Orientation="Vertical">
            <Grid Width="100"
                  Height="100"
                  HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" />
                <base:ImageControl Grid.Column="1"
                                    Width="96"
                                    Height="96"
                                    Margin="2,2,2,9"
                                    Source="{Binding Details.LargeThumbnail, Mode=OneWay}">
                </base:ImageControl>
                <TextBlock Grid.Column="2" />
            </Grid>
            <TextBlock Margin="0,0,0,1"
                       HorizontalAlignment="Center"
                       Text="{Binding DisplayName}"
                       TextWrapping="Wrap" Visibility="Visible" />
        </StackPanel>
    </DataTemplate>

    <GridView x:Key="detailView">
        <GridView.Columns>
            <GridViewColumn DisplayMemberBinding="{Binding DisplayName}" />
        </GridView.Columns>
    </GridView>
    <!--  TODO: implement here, remove from ViewHandler  -->
    <base:PlainView x:Key="thumbView"
                     ItemTemplate="{StaticResource ThumbTemplate}"
                     ItemWidth="150" x:Shared="False"/>
    <base:PlainView x:Key="iconView" 
                     ItemTemplate="{StaticResource IconTemplate}"
                     ItemWidth="100" x:Shared="False"/>

    <Style x:Key="StatusbarStyle1" TargetType="{x:Type StatusBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchbarNoBorder"
           BasedOn="{StaticResource NoBorder}"
           TargetType="{x:Type TextBox}">

        <Style.Triggers>
            <DataTrigger
                Binding="{Binding Path=Text, ElementName=searchBox, Converter={StaticResource _anyToBoolConverter}}"
                Value="true">
                <Setter Property="Background" Value="{DynamicResource imgBgNone}" />
            </DataTrigger>
            <DataTrigger
                Binding="{Binding Path=Text, ElementName=searchBox, Converter={StaticResource _anyToBoolConverter}}"
                Value="false">
                <Setter Property="Background" Value="{DynamicResource imgBg}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>